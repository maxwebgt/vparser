import puppeteer from 'puppeteer';

console.log('üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –ß—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n');

const browser = await puppeteer.launch({ 
  headless: 'new',
  dumpio: true  // –í–∏–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞
});
const page = await browser.newPage();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
const analyzeBrowserState = async (moment) => {
  console.log(`\n=== –°–û–°–¢–û–Ø–ù–ò–ï –ë–†–ê–£–ó–ï–†–ê: ${moment} ===`);
  
  const analysis = await page.evaluate(() => {
    const state = {};
    
    // 1. Navigator properties
    state.navigator = {
      userAgent: navigator.userAgent,
      webdriver: navigator.webdriver,
      platform: navigator.platform,
      language: navigator.language,
      languages: navigator.languages,
      cookieEnabled: navigator.cookieEnabled,
      onLine: navigator.onLine,
      doNotTrack: navigator.doNotTrack,
      hardwareConcurrency: navigator.hardwareConcurrency,
      maxTouchPoints: navigator.maxTouchPoints
    };
    
    // 2. Screen properties  
    state.screen = {
      width: screen.width,
      height: screen.height,
      availWidth: screen.availWidth,
      availHeight: screen.availHeight,
      colorDepth: screen.colorDepth,
      pixelDepth: screen.pixelDepth
    };
    
    // 3. Window properties
    state.window = {
      innerWidth: window.innerWidth,
      innerHeight: window.innerHeight,
      outerWidth: window.outerWidth,
      outerHeight: window.outerHeight,
      devicePixelRatio: window.devicePixelRatio,
      screenX: window.screenX,
      screenY: window.screenY
    };
    
    // 4. WebGL context
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (gl) {
        state.webgl = {
          vendor: gl.getParameter(gl.VENDOR),
          renderer: gl.getParameter(gl.RENDERER),
          version: gl.getParameter(gl.VERSION),
          shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
          extensions: gl.getSupportedExtensions()?.length || 0
        };
      } else {
        state.webgl = { error: 'WebGL not available' };
      }
    } catch (e) {
      state.webgl = { error: e.message };
    }
    
    // 5. Canvas fingerprint
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillText('Browser fingerprint test üî¨', 2, 2);
        state.canvasFingerprint = canvas.toDataURL().substring(0, 100) + '...';
      }
    } catch (e) {
      state.canvasFingerprint = { error: e.message };
    }
    
    // 6. Timing APIs
    state.timing = {
      performanceNowAvailable: typeof performance.now === 'function',
      performanceNow: typeof performance.now === 'function' ? performance.now() : null,
      dateNow: Date.now(),
      timeOrigin: performance.timeOrigin || null
    };
    
    // 7. Chrome API availability
    state.chrome = {
      available: typeof window.chrome !== 'undefined',
      runtime: typeof window.chrome?.runtime !== 'undefined',
      loadTimes: typeof window.chrome?.loadTimes === 'function'
    };
    
    // 8. Permissions API
    state.permissions = {
      available: typeof navigator.permissions !== 'undefined',
      query: typeof navigator.permissions?.query === 'function'
    };
    
    // 9. Document state
    state.document = {
      readyState: document.readyState,
      hidden: document.hidden,
      visibilityState: document.visibilityState,
      hasFocus: document.hasFocus(),
      title: document.title,
      url: document.URL,
      domain: document.domain,
      referrer: document.referrer
    };
    
    // 10. Storage availability
    state.storage = {};
    try {
      state.storage.localStorage = typeof localStorage !== 'undefined' && localStorage !== null;
      state.storage.sessionStorage = typeof sessionStorage !== 'undefined' && sessionStorage !== null;
      state.storage.indexedDB = typeof indexedDB !== 'undefined';
    } catch (e) {
      state.storage.error = e.message;
    }
    
    return state;
  });
  
  console.log('üìä Navigator:', JSON.stringify(analysis.navigator, null, 2));
  console.log('üñ•Ô∏è Screen:', JSON.stringify(analysis.screen, null, 2));
  console.log('ü™ü Window:', JSON.stringify(analysis.window, null, 2));
  console.log('üé® WebGL:', JSON.stringify(analysis.webgl, null, 2));
  console.log('üñºÔ∏è Canvas:', analysis.canvasFingerprint);
  console.log('‚è±Ô∏è Timing:', JSON.stringify(analysis.timing, null, 2));
  console.log('üîß Chrome API:', JSON.stringify(analysis.chrome, null, 2));
  console.log('üîê Permissions:', JSON.stringify(analysis.permissions, null, 2));
  console.log('üìÑ Document:', JSON.stringify(analysis.document, null, 2));
  console.log('üíæ Storage:', JSON.stringify(analysis.storage, null, 2));
  
  return analysis;
};

// –ê–Ω–∞–ª–∏–∑ –î–û –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
const stateBefore = await analyzeBrowserState('–î–û –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
console.log('\nüöÄ –î–ï–õ–ê–ï–ú –ü–ï–†–í–´–ô –ó–ê–ü–†–û–°...');
const startTime = Date.now();
try {
  const response1 = await page.goto('https://www.vseinstrumenti.ru/', { 
    waitUntil: 'domcontentloaded',
    timeout: 30000 
  });
  console.log(`‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: ${response1.status()} (${Date.now() - startTime}ms)`);
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
}

// –ê–Ω–∞–ª–∏–∑ –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
const stateAfter = await analyzeBrowserState('–ü–û–°–õ–ï –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
console.log('\nüîç –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:');

const compareObjects = (before, after, path = '') => {
  for (const key in before) {
    const currentPath = path ? `${path}.${key}` : key;
    
    if (typeof before[key] === 'object' && before[key] !== null && after[key] !== null) {
      compareObjects(before[key], after[key], currentPath);
    } else if (before[key] !== after[key]) {
      console.log(`üîÑ ${currentPath}: ${JSON.stringify(before[key])} ‚Üí ${JSON.stringify(after[key])}`);
    }
  }
};

compareObjects(stateBefore, stateAfter);

// –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
console.log('\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...');
await new Promise(resolve => setTimeout(resolve, 3000));

// –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å
console.log('\nüöÄ –î–ï–õ–ê–ï–ú –í–¢–û–†–û–ô –ó–ê–ü–†–û–°...');
const startTime2 = Date.now();
try {
  const response2 = await page.goto('https://www.vseinstrumenti.ru/', { 
    waitUntil: 'domcontentloaded',
    timeout: 30000 
  });
  console.log(`‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: ${response2.status()} (${Date.now() - startTime2}ms)`);
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
}

// –ê–Ω–∞–ª–∏–∑ –ü–û–°–õ–ï –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞  
const stateAfterSecond = await analyzeBrowserState('–ü–û–°–õ–ï –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');

console.log('\nüîç –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û–°–õ–ï –í–¢–û–†–û–ì–û –ó–ê–ü–†–û–°–ê:');
compareObjects(stateAfter, stateAfterSecond);

await browser.close();
console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!'); 