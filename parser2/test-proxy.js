#!/usr/bin/env node

import { ProxyHandler } from './modules/proxyHandler.js';
import { log } from './modules/logger.js';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare
 */
async function testProxies() {
  try {
    log('üß™ [PROXY-TEST] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏...', 'info');
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Å–∏
    const proxyHandler = new ProxyHandler();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare)
    log('üì° [PROXY-TEST] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ WebShare API...', 'info');
    const initialized = await proxyHandler.initialize();
    
    if (!initialized) {
      log('‚ùå [PROXY-TEST] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏!', 'error');
      return;
    }
    
    log(`‚úÖ [PROXY-TEST] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${proxyHandler.proxyList.length} –ø—Ä–æ–∫—Å–∏`, 'success');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–∫—Å–∏
    const maxTestCount = Math.min(5, proxyHandler.proxyList.length);
    log(`üî¨ [PROXY-TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ ${maxTestCount} –ø—Ä–æ–∫—Å–∏...`, 'info');
    
    let workingCount = 0;
    let deadCount = 0;
    let timeoutCount = 0;
    
    for (let i = 0; i < maxTestCount; i++) {
      const proxy = proxyHandler.proxyList[i];
      log(`\nüéØ [PROXY-TEST] –¢–µ—Å—Ç ${i + 1}/${maxTestCount}: ${proxy.host}:${proxy.port} (${proxy.country})`, 'info');
      
      try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ vseinstrumenti.ru
        const isWorking = await proxyHandler.testProxyConnection(proxy);
        
        if (isWorking) {
          workingCount++;
          log(`‚úÖ [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ ${i + 1} —Ä–∞–±–æ—Ç–∞–µ—Ç!`, 'success');
        } else {
          if (proxy.lastFailReason && proxy.lastFailReason.includes('TUNNEL_CONNECTION_FAILED')) {
            deadCount++;
            log(`üíÄ [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ ${i + 1} –º–µ—Ä—Ç–≤ (–Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è)`, 'error');
          } else if (proxy.lastFailReason && proxy.lastFailReason.includes('TIMEOUT')) {
            timeoutCount++;
            log(`‚è∞ [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ ${i + 1} —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π`, 'warning');
          } else {
            deadCount++;
            log(`‚ùå [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ ${i + 1} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'error');
          }
        }
      } catch (error) {
        deadCount++;
        log(`üí• [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ ${i + 1} –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log('\nüìä [PROXY-TEST] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', 'info');
    log(`‚îú‚îÄ‚îÄ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${maxTestCount}`, 'info');
    log(`‚îú‚îÄ‚îÄ ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö: ${workingCount} (${(workingCount/maxTestCount*100).toFixed(1)}%)`, 'success');
    log(`‚îú‚îÄ‚îÄ üíÄ –ú–µ—Ä—Ç–≤—ã—Ö: ${deadCount} (${(deadCount/maxTestCount*100).toFixed(1)}%)`, 'error');
    log(`‚îî‚îÄ‚îÄ ‚è∞ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö: ${timeoutCount} (${(timeoutCount/maxTestCount*100).toFixed(1)}%)`, 'warning');
    
    if (workingCount === 0) {
      log('üö® [PROXY-TEST] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', 'error');
      log('üí° [PROXY-TEST] –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', 'info');
      log('   1. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º', 'info');
      log('   2. –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ WebShare –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'info');
      log('   3. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API', 'info');
      log('   4. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º/—Ñ–∞–π—Ä–≤–æ–ª–æ–º', 'info');
    } else if (workingCount < maxTestCount * 0.5) {
      log('‚ö†Ô∏è [PROXY-TEST] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–µ–Ω–µ–µ 50% –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç', 'warning');
      log('üí° [PROXY-TEST] –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –≤ –ø–∞–Ω–µ–ª–∏ WebShare', 'info');
    } else {
      log('üéâ [PROXY-TEST] –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!', 'success');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏
    log('\nüîÑ [PROXY-TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º getNextWorkingProxy()...', 'info');
    try {
      const nextProxy = await proxyHandler.getNextWorkingProxy();
      if (nextProxy) {
        log(`‚úÖ [PROXY-TEST] getNextWorkingProxy() –≤–µ—Ä–Ω—É–ª: ${nextProxy.host}:${nextProxy.port}`, 'success');
      } else {
        log(`‚ùå [PROXY-TEST] getNextWorkingProxy() –≤–µ—Ä–Ω—É–ª null`, 'error');
      }
    } catch (error) {
      log(`üí• [PROXY-TEST] getNextWorkingProxy() –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
    
    log('\nüèÅ [PROXY-TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info');
    
  } catch (error) {
    log(`üí• [PROXY-TEST] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProxies().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('Unhandled error:', error);
  process.exit(1);
}); 